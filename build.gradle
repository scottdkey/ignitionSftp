buildscript {
  repositories{
    gradlePluginPortal()
    mavenLocal()
    mavenCentral()
    maven { url "https://nexus.inductiveautomation.com/repository/inductiveautomation-thirdparty/" }
    maven { url "https://nexus.inductiveautomation.com/repository/inductiveautomation-releases/" }
    maven { url "https://nexus.inductiveautomation.com/repository/inductiveautomation-snapshots/" }
  }
  ext.sdk_version = "8.1.0-SNAPSHOT"

  dependencies {
    classpath("com.inductiveautomation.gradle:ignition-module-plugin:1.2.10-SNAPSHOT")
  }
}

plugins {
  id "base"
}

version = "1.0.0"
group  = "com.skm"
allprojects {
  apply plugin: "ignition-module-plugin"

  ignitionModule {
    fileName "skmSFTP"
    moduleRoot "skmSFTP"
    moduleName "skmSFTP"
    moduleId "com.skm.sftp"
    moduleVersion "${project.version}"
    moduleDescription "adding SFTP functionaltity to ignition 8.1.*"
    requiredFrameworkVersion "8"
    requiredIgnitionVersion "8.1.0"
    isFree true
    license "license.html"
    moduleDependencies = [
        [scope: "C", moduleId: "com.inductiveautomation.perspective"],
        [scope: "G", moduleId: "com.inductiveautomation.perspective"],
        [scope: "D", moduleId: "com.inductiveautomation.perspective"]
    ]
    projectScopes = [
        [name: "common", scope: "CGD"],
        [name: "client", scope: "CD"],
        [name: "gateway", scope: "G"],
        [name: "designer", scope: "D"],



    ]
    hooks = [
        [scope: "C", hookClass: "com.skm.sftp.client.ClientHook"],
        [scope: "G", hookClass: "com.skm.sftp.gateway.GatewayHook"],
        [scope: "D", hookClass: "com.skm.sftp.designer.DesignerHook"]
    ]
  }
  if(project.plugins.hasPlugin("java")){
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
  }


  // where should we try to resolve maven artifacts from?
  repositories {
    mavenLocal()
    maven { url "https://nexus.inductiveautomation.com/repository/inductiveautomation-releases/" }
    maven { url "https://nexus.inductiveautomation.com/repository/inductiveautomation-thirdparty/" }
    maven { url "https://nexus.inductiveautomation.com/repository/inductiveautomation-snapshots/" }
    mavenCentral()
  }
}

task deepClean() {
  dependsOn allprojects.collect { "${it.path}:clean" }
  description "Executes clean tasks and remove node plugin caches."
  doLast {
    delete(file(".gradle"))
  }
}
/**
 * Gradle wrapper configuration*/
wrapper {
  distributionUrl = "https://services.gradle.org/distributions/gradle-5.6.4-all.zip"
}
